#!/usr/bin/env python

class ARFFGenerator:
	def __init__(self):
		self.__init__(None, None, None)

	def __init__(self, options, test_runs):
		self.options   = options
		self.test_runs = test_runs

	def generate(self, test, error=None):
		result = []
		result.append('% Generated by failure-simulator.py')
		result.append('%% Test: %s' % test.name)

		outcomes = set('p')
		errors   = set()

		if error == None:
			result.append('@relation failure_simulator_%s' % test.name)
			for pattern in test.patterns:
				errors.add(pattern.result)
		else:
			result.append('%% Error: %s' % error)
			result.append('@relation failure_simulator_%s_%s' % (test.name, error))
			errors.add(error)

		outcomes = errors | set('p')

		for option in self.options:
			line = '@attribute %s {%s}' % (option.name, ', '.join(option.values))
			result.append(line)

		line = "@attribute outcome {%s}" % ', '.join(outcomes)
		result.append(line)
		result.extend(self.generate_data(test, error))

		return '\n'.join(result)

	def generate_data(self, test, error=None):
		result = ['@data']
		for test_run in self.test_runs:
			test_result = test_run['results'][test.name]
			if error == None or test_result in ['p', error]:
				line = ','.join([test_run['configuration'][option.name] for option in self.options])
				line += ',' + test_result
				result.append(line)
		return result

